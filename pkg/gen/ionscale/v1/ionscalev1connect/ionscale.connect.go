// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ionscale/v1/ionscale.proto

package ionscalev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jsiebens/ionscale/pkg/gen/ionscale/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IonscaleServiceName is the fully-qualified name of the IonscaleService service.
	IonscaleServiceName = "ionscale.v1.IonscaleService"
)

// IonscaleServiceClient is a client for the ionscale.v1.IonscaleService service.
type IonscaleServiceClient interface {
	GetVersion(context.Context, *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error)
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticationRequest]) (*connect_go.ServerStreamForClient[v1.AuthenticationResponse], error)
	GetDERPMap(context.Context, *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error)
	SetDERPMap(context.Context, *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error)
	CreateAuthMethod(context.Context, *connect_go.Request[v1.CreateAuthMethodRequest]) (*connect_go.Response[v1.CreateAuthMethodResponse], error)
	ListAuthMethods(context.Context, *connect_go.Request[v1.ListAuthMethodsRequest]) (*connect_go.Response[v1.ListAuthMethodsResponse], error)
	CreateAuthFilter(context.Context, *connect_go.Request[v1.CreateAuthFilterRequest]) (*connect_go.Response[v1.CreateAuthFilterResponse], error)
	DeleteAuthFilter(context.Context, *connect_go.Request[v1.DeleteAuthFilterRequest]) (*connect_go.Response[v1.DeleteAuthFilterResponse], error)
	ListAuthFilters(context.Context, *connect_go.Request[v1.ListAuthFiltersRequest]) (*connect_go.Response[v1.ListAuthFiltersResponse], error)
	CreateTailnet(context.Context, *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error)
	GetTailnet(context.Context, *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error)
	ListTailnets(context.Context, *connect_go.Request[v1.ListTailnetRequest]) (*connect_go.Response[v1.ListTailnetResponse], error)
	DeleteTailnet(context.Context, *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error)
	GetDNSConfig(context.Context, *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error)
	SetDNSConfig(context.Context, *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error)
	GetACLPolicy(context.Context, *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error)
	SetACLPolicy(context.Context, *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error)
	GetAuthKey(context.Context, *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error)
	CreateAuthKey(context.Context, *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error)
	DeleteAuthKey(context.Context, *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error)
	ListAuthKeys(context.Context, *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error)
	ListMachines(context.Context, *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error)
	ExpireMachine(context.Context, *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error)
	DeleteMachine(context.Context, *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error)
	GetMachineRoutes(context.Context, *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error)
	SetMachineRoutes(context.Context, *connect_go.Request[v1.SetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error)
}

// NewIonscaleServiceClient constructs a client for the ionscale.v1.IonscaleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIonscaleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IonscaleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ionscaleServiceClient{
		getVersion: connect_go.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetVersion",
			opts...,
		),
		authenticate: connect_go.NewClient[v1.AuthenticationRequest, v1.AuthenticationResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/Authenticate",
			opts...,
		),
		getDERPMap: connect_go.NewClient[v1.GetDERPMapRequest, v1.GetDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetDERPMap",
			opts...,
		),
		setDERPMap: connect_go.NewClient[v1.SetDERPMapRequest, v1.SetDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetDERPMap",
			opts...,
		),
		createAuthMethod: connect_go.NewClient[v1.CreateAuthMethodRequest, v1.CreateAuthMethodResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/CreateAuthMethod",
			opts...,
		),
		listAuthMethods: connect_go.NewClient[v1.ListAuthMethodsRequest, v1.ListAuthMethodsResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListAuthMethods",
			opts...,
		),
		createAuthFilter: connect_go.NewClient[v1.CreateAuthFilterRequest, v1.CreateAuthFilterResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/CreateAuthFilter",
			opts...,
		),
		deleteAuthFilter: connect_go.NewClient[v1.DeleteAuthFilterRequest, v1.DeleteAuthFilterResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteAuthFilter",
			opts...,
		),
		listAuthFilters: connect_go.NewClient[v1.ListAuthFiltersRequest, v1.ListAuthFiltersResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListAuthFilters",
			opts...,
		),
		createTailnet: connect_go.NewClient[v1.CreateTailnetRequest, v1.CreateTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/CreateTailnet",
			opts...,
		),
		getTailnet: connect_go.NewClient[v1.GetTailnetRequest, v1.GetTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetTailnet",
			opts...,
		),
		listTailnets: connect_go.NewClient[v1.ListTailnetRequest, v1.ListTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListTailnets",
			opts...,
		),
		deleteTailnet: connect_go.NewClient[v1.DeleteTailnetRequest, v1.DeleteTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteTailnet",
			opts...,
		),
		getDNSConfig: connect_go.NewClient[v1.GetDNSConfigRequest, v1.GetDNSConfigResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetDNSConfig",
			opts...,
		),
		setDNSConfig: connect_go.NewClient[v1.SetDNSConfigRequest, v1.SetDNSConfigResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetDNSConfig",
			opts...,
		),
		getACLPolicy: connect_go.NewClient[v1.GetACLPolicyRequest, v1.GetACLPolicyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetACLPolicy",
			opts...,
		),
		setACLPolicy: connect_go.NewClient[v1.SetACLPolicyRequest, v1.SetACLPolicyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetACLPolicy",
			opts...,
		),
		getAuthKey: connect_go.NewClient[v1.GetAuthKeyRequest, v1.GetAuthKeyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetAuthKey",
			opts...,
		),
		createAuthKey: connect_go.NewClient[v1.CreateAuthKeyRequest, v1.CreateAuthKeyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/CreateAuthKey",
			opts...,
		),
		deleteAuthKey: connect_go.NewClient[v1.DeleteAuthKeyRequest, v1.DeleteAuthKeyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteAuthKey",
			opts...,
		),
		listAuthKeys: connect_go.NewClient[v1.ListAuthKeysRequest, v1.ListAuthKeysResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListAuthKeys",
			opts...,
		),
		listMachines: connect_go.NewClient[v1.ListMachinesRequest, v1.ListMachinesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListMachines",
			opts...,
		),
		expireMachine: connect_go.NewClient[v1.ExpireMachineRequest, v1.ExpireMachineResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ExpireMachine",
			opts...,
		),
		deleteMachine: connect_go.NewClient[v1.DeleteMachineRequest, v1.DeleteMachineResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteMachine",
			opts...,
		),
		getMachineRoutes: connect_go.NewClient[v1.GetMachineRoutesRequest, v1.GetMachineRoutesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetMachineRoutes",
			opts...,
		),
		setMachineRoutes: connect_go.NewClient[v1.SetMachineRoutesRequest, v1.GetMachineRoutesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetMachineRoutes",
			opts...,
		),
	}
}

// ionscaleServiceClient implements IonscaleServiceClient.
type ionscaleServiceClient struct {
	getVersion       *connect_go.Client[v1.GetVersionRequest, v1.GetVersionResponse]
	authenticate     *connect_go.Client[v1.AuthenticationRequest, v1.AuthenticationResponse]
	getDERPMap       *connect_go.Client[v1.GetDERPMapRequest, v1.GetDERPMapResponse]
	setDERPMap       *connect_go.Client[v1.SetDERPMapRequest, v1.SetDERPMapResponse]
	createAuthMethod *connect_go.Client[v1.CreateAuthMethodRequest, v1.CreateAuthMethodResponse]
	listAuthMethods  *connect_go.Client[v1.ListAuthMethodsRequest, v1.ListAuthMethodsResponse]
	createAuthFilter *connect_go.Client[v1.CreateAuthFilterRequest, v1.CreateAuthFilterResponse]
	deleteAuthFilter *connect_go.Client[v1.DeleteAuthFilterRequest, v1.DeleteAuthFilterResponse]
	listAuthFilters  *connect_go.Client[v1.ListAuthFiltersRequest, v1.ListAuthFiltersResponse]
	createTailnet    *connect_go.Client[v1.CreateTailnetRequest, v1.CreateTailnetResponse]
	getTailnet       *connect_go.Client[v1.GetTailnetRequest, v1.GetTailnetResponse]
	listTailnets     *connect_go.Client[v1.ListTailnetRequest, v1.ListTailnetResponse]
	deleteTailnet    *connect_go.Client[v1.DeleteTailnetRequest, v1.DeleteTailnetResponse]
	getDNSConfig     *connect_go.Client[v1.GetDNSConfigRequest, v1.GetDNSConfigResponse]
	setDNSConfig     *connect_go.Client[v1.SetDNSConfigRequest, v1.SetDNSConfigResponse]
	getACLPolicy     *connect_go.Client[v1.GetACLPolicyRequest, v1.GetACLPolicyResponse]
	setACLPolicy     *connect_go.Client[v1.SetACLPolicyRequest, v1.SetACLPolicyResponse]
	getAuthKey       *connect_go.Client[v1.GetAuthKeyRequest, v1.GetAuthKeyResponse]
	createAuthKey    *connect_go.Client[v1.CreateAuthKeyRequest, v1.CreateAuthKeyResponse]
	deleteAuthKey    *connect_go.Client[v1.DeleteAuthKeyRequest, v1.DeleteAuthKeyResponse]
	listAuthKeys     *connect_go.Client[v1.ListAuthKeysRequest, v1.ListAuthKeysResponse]
	listMachines     *connect_go.Client[v1.ListMachinesRequest, v1.ListMachinesResponse]
	expireMachine    *connect_go.Client[v1.ExpireMachineRequest, v1.ExpireMachineResponse]
	deleteMachine    *connect_go.Client[v1.DeleteMachineRequest, v1.DeleteMachineResponse]
	getMachineRoutes *connect_go.Client[v1.GetMachineRoutesRequest, v1.GetMachineRoutesResponse]
	setMachineRoutes *connect_go.Client[v1.SetMachineRoutesRequest, v1.GetMachineRoutesResponse]
}

// GetVersion calls ionscale.v1.IonscaleService.GetVersion.
func (c *ionscaleServiceClient) GetVersion(ctx context.Context, req *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// Authenticate calls ionscale.v1.IonscaleService.Authenticate.
func (c *ionscaleServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v1.AuthenticationRequest]) (*connect_go.ServerStreamForClient[v1.AuthenticationResponse], error) {
	return c.authenticate.CallServerStream(ctx, req)
}

// GetDERPMap calls ionscale.v1.IonscaleService.GetDERPMap.
func (c *ionscaleServiceClient) GetDERPMap(ctx context.Context, req *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error) {
	return c.getDERPMap.CallUnary(ctx, req)
}

// SetDERPMap calls ionscale.v1.IonscaleService.SetDERPMap.
func (c *ionscaleServiceClient) SetDERPMap(ctx context.Context, req *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error) {
	return c.setDERPMap.CallUnary(ctx, req)
}

// CreateAuthMethod calls ionscale.v1.IonscaleService.CreateAuthMethod.
func (c *ionscaleServiceClient) CreateAuthMethod(ctx context.Context, req *connect_go.Request[v1.CreateAuthMethodRequest]) (*connect_go.Response[v1.CreateAuthMethodResponse], error) {
	return c.createAuthMethod.CallUnary(ctx, req)
}

// ListAuthMethods calls ionscale.v1.IonscaleService.ListAuthMethods.
func (c *ionscaleServiceClient) ListAuthMethods(ctx context.Context, req *connect_go.Request[v1.ListAuthMethodsRequest]) (*connect_go.Response[v1.ListAuthMethodsResponse], error) {
	return c.listAuthMethods.CallUnary(ctx, req)
}

// CreateAuthFilter calls ionscale.v1.IonscaleService.CreateAuthFilter.
func (c *ionscaleServiceClient) CreateAuthFilter(ctx context.Context, req *connect_go.Request[v1.CreateAuthFilterRequest]) (*connect_go.Response[v1.CreateAuthFilterResponse], error) {
	return c.createAuthFilter.CallUnary(ctx, req)
}

// DeleteAuthFilter calls ionscale.v1.IonscaleService.DeleteAuthFilter.
func (c *ionscaleServiceClient) DeleteAuthFilter(ctx context.Context, req *connect_go.Request[v1.DeleteAuthFilterRequest]) (*connect_go.Response[v1.DeleteAuthFilterResponse], error) {
	return c.deleteAuthFilter.CallUnary(ctx, req)
}

// ListAuthFilters calls ionscale.v1.IonscaleService.ListAuthFilters.
func (c *ionscaleServiceClient) ListAuthFilters(ctx context.Context, req *connect_go.Request[v1.ListAuthFiltersRequest]) (*connect_go.Response[v1.ListAuthFiltersResponse], error) {
	return c.listAuthFilters.CallUnary(ctx, req)
}

// CreateTailnet calls ionscale.v1.IonscaleService.CreateTailnet.
func (c *ionscaleServiceClient) CreateTailnet(ctx context.Context, req *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error) {
	return c.createTailnet.CallUnary(ctx, req)
}

// GetTailnet calls ionscale.v1.IonscaleService.GetTailnet.
func (c *ionscaleServiceClient) GetTailnet(ctx context.Context, req *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error) {
	return c.getTailnet.CallUnary(ctx, req)
}

// ListTailnets calls ionscale.v1.IonscaleService.ListTailnets.
func (c *ionscaleServiceClient) ListTailnets(ctx context.Context, req *connect_go.Request[v1.ListTailnetRequest]) (*connect_go.Response[v1.ListTailnetResponse], error) {
	return c.listTailnets.CallUnary(ctx, req)
}

// DeleteTailnet calls ionscale.v1.IonscaleService.DeleteTailnet.
func (c *ionscaleServiceClient) DeleteTailnet(ctx context.Context, req *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error) {
	return c.deleteTailnet.CallUnary(ctx, req)
}

// GetDNSConfig calls ionscale.v1.IonscaleService.GetDNSConfig.
func (c *ionscaleServiceClient) GetDNSConfig(ctx context.Context, req *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error) {
	return c.getDNSConfig.CallUnary(ctx, req)
}

// SetDNSConfig calls ionscale.v1.IonscaleService.SetDNSConfig.
func (c *ionscaleServiceClient) SetDNSConfig(ctx context.Context, req *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error) {
	return c.setDNSConfig.CallUnary(ctx, req)
}

// GetACLPolicy calls ionscale.v1.IonscaleService.GetACLPolicy.
func (c *ionscaleServiceClient) GetACLPolicy(ctx context.Context, req *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error) {
	return c.getACLPolicy.CallUnary(ctx, req)
}

// SetACLPolicy calls ionscale.v1.IonscaleService.SetACLPolicy.
func (c *ionscaleServiceClient) SetACLPolicy(ctx context.Context, req *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error) {
	return c.setACLPolicy.CallUnary(ctx, req)
}

// GetAuthKey calls ionscale.v1.IonscaleService.GetAuthKey.
func (c *ionscaleServiceClient) GetAuthKey(ctx context.Context, req *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error) {
	return c.getAuthKey.CallUnary(ctx, req)
}

// CreateAuthKey calls ionscale.v1.IonscaleService.CreateAuthKey.
func (c *ionscaleServiceClient) CreateAuthKey(ctx context.Context, req *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error) {
	return c.createAuthKey.CallUnary(ctx, req)
}

// DeleteAuthKey calls ionscale.v1.IonscaleService.DeleteAuthKey.
func (c *ionscaleServiceClient) DeleteAuthKey(ctx context.Context, req *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error) {
	return c.deleteAuthKey.CallUnary(ctx, req)
}

// ListAuthKeys calls ionscale.v1.IonscaleService.ListAuthKeys.
func (c *ionscaleServiceClient) ListAuthKeys(ctx context.Context, req *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error) {
	return c.listAuthKeys.CallUnary(ctx, req)
}

// ListMachines calls ionscale.v1.IonscaleService.ListMachines.
func (c *ionscaleServiceClient) ListMachines(ctx context.Context, req *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// ExpireMachine calls ionscale.v1.IonscaleService.ExpireMachine.
func (c *ionscaleServiceClient) ExpireMachine(ctx context.Context, req *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error) {
	return c.expireMachine.CallUnary(ctx, req)
}

// DeleteMachine calls ionscale.v1.IonscaleService.DeleteMachine.
func (c *ionscaleServiceClient) DeleteMachine(ctx context.Context, req *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error) {
	return c.deleteMachine.CallUnary(ctx, req)
}

// GetMachineRoutes calls ionscale.v1.IonscaleService.GetMachineRoutes.
func (c *ionscaleServiceClient) GetMachineRoutes(ctx context.Context, req *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error) {
	return c.getMachineRoutes.CallUnary(ctx, req)
}

// SetMachineRoutes calls ionscale.v1.IonscaleService.SetMachineRoutes.
func (c *ionscaleServiceClient) SetMachineRoutes(ctx context.Context, req *connect_go.Request[v1.SetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error) {
	return c.setMachineRoutes.CallUnary(ctx, req)
}

// IonscaleServiceHandler is an implementation of the ionscale.v1.IonscaleService service.
type IonscaleServiceHandler interface {
	GetVersion(context.Context, *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error)
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticationRequest], *connect_go.ServerStream[v1.AuthenticationResponse]) error
	GetDERPMap(context.Context, *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error)
	SetDERPMap(context.Context, *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error)
	CreateAuthMethod(context.Context, *connect_go.Request[v1.CreateAuthMethodRequest]) (*connect_go.Response[v1.CreateAuthMethodResponse], error)
	ListAuthMethods(context.Context, *connect_go.Request[v1.ListAuthMethodsRequest]) (*connect_go.Response[v1.ListAuthMethodsResponse], error)
	CreateAuthFilter(context.Context, *connect_go.Request[v1.CreateAuthFilterRequest]) (*connect_go.Response[v1.CreateAuthFilterResponse], error)
	DeleteAuthFilter(context.Context, *connect_go.Request[v1.DeleteAuthFilterRequest]) (*connect_go.Response[v1.DeleteAuthFilterResponse], error)
	ListAuthFilters(context.Context, *connect_go.Request[v1.ListAuthFiltersRequest]) (*connect_go.Response[v1.ListAuthFiltersResponse], error)
	CreateTailnet(context.Context, *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error)
	GetTailnet(context.Context, *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error)
	ListTailnets(context.Context, *connect_go.Request[v1.ListTailnetRequest]) (*connect_go.Response[v1.ListTailnetResponse], error)
	DeleteTailnet(context.Context, *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error)
	GetDNSConfig(context.Context, *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error)
	SetDNSConfig(context.Context, *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error)
	GetACLPolicy(context.Context, *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error)
	SetACLPolicy(context.Context, *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error)
	GetAuthKey(context.Context, *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error)
	CreateAuthKey(context.Context, *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error)
	DeleteAuthKey(context.Context, *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error)
	ListAuthKeys(context.Context, *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error)
	ListMachines(context.Context, *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error)
	ExpireMachine(context.Context, *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error)
	DeleteMachine(context.Context, *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error)
	GetMachineRoutes(context.Context, *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error)
	SetMachineRoutes(context.Context, *connect_go.Request[v1.SetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error)
}

// NewIonscaleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIonscaleServiceHandler(svc IonscaleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ionscale.v1.IonscaleService/GetVersion", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetVersion",
		svc.GetVersion,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/Authenticate", connect_go.NewServerStreamHandler(
		"/ionscale.v1.IonscaleService/Authenticate",
		svc.Authenticate,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetDERPMap",
		svc.GetDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetDERPMap",
		svc.SetDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/CreateAuthMethod", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/CreateAuthMethod",
		svc.CreateAuthMethod,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListAuthMethods", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListAuthMethods",
		svc.ListAuthMethods,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/CreateAuthFilter", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/CreateAuthFilter",
		svc.CreateAuthFilter,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteAuthFilter", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteAuthFilter",
		svc.DeleteAuthFilter,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListAuthFilters", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListAuthFilters",
		svc.ListAuthFilters,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/CreateTailnet", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/CreateTailnet",
		svc.CreateTailnet,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetTailnet", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetTailnet",
		svc.GetTailnet,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListTailnets", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListTailnets",
		svc.ListTailnets,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteTailnet", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteTailnet",
		svc.DeleteTailnet,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetDNSConfig", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetDNSConfig",
		svc.GetDNSConfig,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetDNSConfig", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetDNSConfig",
		svc.SetDNSConfig,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetACLPolicy", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetACLPolicy",
		svc.GetACLPolicy,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetACLPolicy", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetACLPolicy",
		svc.SetACLPolicy,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetAuthKey", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetAuthKey",
		svc.GetAuthKey,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/CreateAuthKey", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/CreateAuthKey",
		svc.CreateAuthKey,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteAuthKey", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteAuthKey",
		svc.DeleteAuthKey,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListAuthKeys", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListAuthKeys",
		svc.ListAuthKeys,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListMachines", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListMachines",
		svc.ListMachines,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ExpireMachine", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ExpireMachine",
		svc.ExpireMachine,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteMachine", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteMachine",
		svc.DeleteMachine,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetMachineRoutes", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetMachineRoutes",
		svc.GetMachineRoutes,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetMachineRoutes", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetMachineRoutes",
		svc.SetMachineRoutes,
		opts...,
	))
	return "/ionscale.v1.IonscaleService/", mux
}

// UnimplementedIonscaleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIonscaleServiceHandler struct{}

func (UnimplementedIonscaleServiceHandler) GetVersion(context.Context, *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetVersion is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) Authenticate(context.Context, *connect_go.Request[v1.AuthenticationRequest], *connect_go.ServerStream[v1.AuthenticationResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.Authenticate is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDERPMap(context.Context, *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDERPMap(context.Context, *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateAuthMethod(context.Context, *connect_go.Request[v1.CreateAuthMethodRequest]) (*connect_go.Response[v1.CreateAuthMethodResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateAuthMethod is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListAuthMethods(context.Context, *connect_go.Request[v1.ListAuthMethodsRequest]) (*connect_go.Response[v1.ListAuthMethodsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListAuthMethods is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateAuthFilter(context.Context, *connect_go.Request[v1.CreateAuthFilterRequest]) (*connect_go.Response[v1.CreateAuthFilterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateAuthFilter is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteAuthFilter(context.Context, *connect_go.Request[v1.DeleteAuthFilterRequest]) (*connect_go.Response[v1.DeleteAuthFilterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteAuthFilter is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListAuthFilters(context.Context, *connect_go.Request[v1.ListAuthFiltersRequest]) (*connect_go.Response[v1.ListAuthFiltersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListAuthFilters is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateTailnet(context.Context, *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetTailnet(context.Context, *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListTailnets(context.Context, *connect_go.Request[v1.ListTailnetRequest]) (*connect_go.Response[v1.ListTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListTailnets is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteTailnet(context.Context, *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDNSConfig(context.Context, *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDNSConfig is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDNSConfig(context.Context, *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDNSConfig is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetACLPolicy(context.Context, *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetACLPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetACLPolicy(context.Context, *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetACLPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetAuthKey(context.Context, *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateAuthKey(context.Context, *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteAuthKey(context.Context, *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListAuthKeys(context.Context, *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListAuthKeys is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListMachines(context.Context, *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListMachines is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ExpireMachine(context.Context, *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ExpireMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteMachine(context.Context, *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetMachineRoutes(context.Context, *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetMachineRoutes(context.Context, *connect_go.Request[v1.SetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetMachineRoutes is not implemented"))
}
