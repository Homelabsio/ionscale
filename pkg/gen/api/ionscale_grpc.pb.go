// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IonscaleClient is the client API for Ionscale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IonscaleClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetDERPMap(ctx context.Context, in *GetDERPMapRequest, opts ...grpc.CallOption) (*GetDERPMapResponse, error)
	SetDERPMap(ctx context.Context, in *SetDERPMapRequest, opts ...grpc.CallOption) (*SetDERPMapResponse, error)
	CreateAuthMethod(ctx context.Context, in *CreateAuthMethodRequest, opts ...grpc.CallOption) (*CreateAuthMethodResponse, error)
	ListAuthMethods(ctx context.Context, in *ListAuthMethodsRequest, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error)
	CreateTailnet(ctx context.Context, in *CreateTailnetRequest, opts ...grpc.CallOption) (*CreateTailnetResponse, error)
	GetTailnet(ctx context.Context, in *GetTailnetRequest, opts ...grpc.CallOption) (*GetTailnetResponse, error)
	ListTailnets(ctx context.Context, in *ListTailnetRequest, opts ...grpc.CallOption) (*ListTailnetResponse, error)
	DeleteTailnet(ctx context.Context, in *DeleteTailnetRequest, opts ...grpc.CallOption) (*DeleteTailnetResponse, error)
	GetDNSConfig(ctx context.Context, in *GetDNSConfigRequest, opts ...grpc.CallOption) (*GetDNSConfigResponse, error)
	SetDNSConfig(ctx context.Context, in *SetDNSConfigRequest, opts ...grpc.CallOption) (*SetDNSConfigResponse, error)
	GetACLPolicy(ctx context.Context, in *GetACLPolicyRequest, opts ...grpc.CallOption) (*GetACLPolicyResponse, error)
	SetACLPolicy(ctx context.Context, in *SetACLPolicyRequest, opts ...grpc.CallOption) (*SetACLPolicyResponse, error)
	GetAuthKey(ctx context.Context, in *GetAuthKeyRequest, opts ...grpc.CallOption) (*GetAuthKeyResponse, error)
	CreateAuthKey(ctx context.Context, in *CreateAuthKeyRequest, opts ...grpc.CallOption) (*CreateAuthKeyResponse, error)
	DeleteAuthKey(ctx context.Context, in *DeleteAuthKeyRequest, opts ...grpc.CallOption) (*DeleteAuthKeyResponse, error)
	ListAuthKeys(ctx context.Context, in *ListAuthKeysRequest, opts ...grpc.CallOption) (*ListAuthKeysResponse, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	ExpireMachine(ctx context.Context, in *ExpireMachineRequest, opts ...grpc.CallOption) (*ExpireMachineResponse, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
	GetMachineRoutes(ctx context.Context, in *GetMachineRoutesRequest, opts ...grpc.CallOption) (*GetMachineRoutesResponse, error)
	SetMachineRoutes(ctx context.Context, in *SetMachineRoutesRequest, opts ...grpc.CallOption) (*GetMachineRoutesResponse, error)
}

type ionscaleClient struct {
	cc grpc.ClientConnInterface
}

func NewIonscaleClient(cc grpc.ClientConnInterface) IonscaleClient {
	return &ionscaleClient{cc}
}

func (c *ionscaleClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) GetDERPMap(ctx context.Context, in *GetDERPMapRequest, opts ...grpc.CallOption) (*GetDERPMapResponse, error) {
	out := new(GetDERPMapResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetDERPMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) SetDERPMap(ctx context.Context, in *SetDERPMapRequest, opts ...grpc.CallOption) (*SetDERPMapResponse, error) {
	out := new(SetDERPMapResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/SetDERPMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) CreateAuthMethod(ctx context.Context, in *CreateAuthMethodRequest, opts ...grpc.CallOption) (*CreateAuthMethodResponse, error) {
	out := new(CreateAuthMethodResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/CreateAuthMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListAuthMethods(ctx context.Context, in *ListAuthMethodsRequest, opts ...grpc.CallOption) (*ListAuthMethodsResponse, error) {
	out := new(ListAuthMethodsResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListAuthMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) CreateTailnet(ctx context.Context, in *CreateTailnetRequest, opts ...grpc.CallOption) (*CreateTailnetResponse, error) {
	out := new(CreateTailnetResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/CreateTailnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) GetTailnet(ctx context.Context, in *GetTailnetRequest, opts ...grpc.CallOption) (*GetTailnetResponse, error) {
	out := new(GetTailnetResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetTailnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListTailnets(ctx context.Context, in *ListTailnetRequest, opts ...grpc.CallOption) (*ListTailnetResponse, error) {
	out := new(ListTailnetResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListTailnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) DeleteTailnet(ctx context.Context, in *DeleteTailnetRequest, opts ...grpc.CallOption) (*DeleteTailnetResponse, error) {
	out := new(DeleteTailnetResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/DeleteTailnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) GetDNSConfig(ctx context.Context, in *GetDNSConfigRequest, opts ...grpc.CallOption) (*GetDNSConfigResponse, error) {
	out := new(GetDNSConfigResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetDNSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) SetDNSConfig(ctx context.Context, in *SetDNSConfigRequest, opts ...grpc.CallOption) (*SetDNSConfigResponse, error) {
	out := new(SetDNSConfigResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/SetDNSConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) GetACLPolicy(ctx context.Context, in *GetACLPolicyRequest, opts ...grpc.CallOption) (*GetACLPolicyResponse, error) {
	out := new(GetACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) SetACLPolicy(ctx context.Context, in *SetACLPolicyRequest, opts ...grpc.CallOption) (*SetACLPolicyResponse, error) {
	out := new(SetACLPolicyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/SetACLPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) GetAuthKey(ctx context.Context, in *GetAuthKeyRequest, opts ...grpc.CallOption) (*GetAuthKeyResponse, error) {
	out := new(GetAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) CreateAuthKey(ctx context.Context, in *CreateAuthKeyRequest, opts ...grpc.CallOption) (*CreateAuthKeyResponse, error) {
	out := new(CreateAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/CreateAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) DeleteAuthKey(ctx context.Context, in *DeleteAuthKeyRequest, opts ...grpc.CallOption) (*DeleteAuthKeyResponse, error) {
	out := new(DeleteAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/DeleteAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListAuthKeys(ctx context.Context, in *ListAuthKeysRequest, opts ...grpc.CallOption) (*ListAuthKeysResponse, error) {
	out := new(ListAuthKeysResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ExpireMachine(ctx context.Context, in *ExpireMachineRequest, opts ...grpc.CallOption) (*ExpireMachineResponse, error) {
	out := new(ExpireMachineResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ExpireMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) GetMachineRoutes(ctx context.Context, in *GetMachineRoutesRequest, opts ...grpc.CallOption) (*GetMachineRoutesResponse, error) {
	out := new(GetMachineRoutesResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetMachineRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) SetMachineRoutes(ctx context.Context, in *SetMachineRoutesRequest, opts ...grpc.CallOption) (*GetMachineRoutesResponse, error) {
	out := new(GetMachineRoutesResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/SetMachineRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IonscaleServer is the server API for Ionscale service.
// All implementations should embed UnimplementedIonscaleServer
// for forward compatibility
type IonscaleServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	GetDERPMap(context.Context, *GetDERPMapRequest) (*GetDERPMapResponse, error)
	SetDERPMap(context.Context, *SetDERPMapRequest) (*SetDERPMapResponse, error)
	CreateAuthMethod(context.Context, *CreateAuthMethodRequest) (*CreateAuthMethodResponse, error)
	ListAuthMethods(context.Context, *ListAuthMethodsRequest) (*ListAuthMethodsResponse, error)
	CreateTailnet(context.Context, *CreateTailnetRequest) (*CreateTailnetResponse, error)
	GetTailnet(context.Context, *GetTailnetRequest) (*GetTailnetResponse, error)
	ListTailnets(context.Context, *ListTailnetRequest) (*ListTailnetResponse, error)
	DeleteTailnet(context.Context, *DeleteTailnetRequest) (*DeleteTailnetResponse, error)
	GetDNSConfig(context.Context, *GetDNSConfigRequest) (*GetDNSConfigResponse, error)
	SetDNSConfig(context.Context, *SetDNSConfigRequest) (*SetDNSConfigResponse, error)
	GetACLPolicy(context.Context, *GetACLPolicyRequest) (*GetACLPolicyResponse, error)
	SetACLPolicy(context.Context, *SetACLPolicyRequest) (*SetACLPolicyResponse, error)
	GetAuthKey(context.Context, *GetAuthKeyRequest) (*GetAuthKeyResponse, error)
	CreateAuthKey(context.Context, *CreateAuthKeyRequest) (*CreateAuthKeyResponse, error)
	DeleteAuthKey(context.Context, *DeleteAuthKeyRequest) (*DeleteAuthKeyResponse, error)
	ListAuthKeys(context.Context, *ListAuthKeysRequest) (*ListAuthKeysResponse, error)
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	ExpireMachine(context.Context, *ExpireMachineRequest) (*ExpireMachineResponse, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
	GetMachineRoutes(context.Context, *GetMachineRoutesRequest) (*GetMachineRoutesResponse, error)
	SetMachineRoutes(context.Context, *SetMachineRoutesRequest) (*GetMachineRoutesResponse, error)
}

// UnimplementedIonscaleServer should be embedded to have forward compatible implementations.
type UnimplementedIonscaleServer struct {
}

func (UnimplementedIonscaleServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedIonscaleServer) GetDERPMap(context.Context, *GetDERPMapRequest) (*GetDERPMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDERPMap not implemented")
}
func (UnimplementedIonscaleServer) SetDERPMap(context.Context, *SetDERPMapRequest) (*SetDERPMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDERPMap not implemented")
}
func (UnimplementedIonscaleServer) CreateAuthMethod(context.Context, *CreateAuthMethodRequest) (*CreateAuthMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthMethod not implemented")
}
func (UnimplementedIonscaleServer) ListAuthMethods(context.Context, *ListAuthMethodsRequest) (*ListAuthMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthMethods not implemented")
}
func (UnimplementedIonscaleServer) CreateTailnet(context.Context, *CreateTailnetRequest) (*CreateTailnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTailnet not implemented")
}
func (UnimplementedIonscaleServer) GetTailnet(context.Context, *GetTailnetRequest) (*GetTailnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTailnet not implemented")
}
func (UnimplementedIonscaleServer) ListTailnets(context.Context, *ListTailnetRequest) (*ListTailnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTailnets not implemented")
}
func (UnimplementedIonscaleServer) DeleteTailnet(context.Context, *DeleteTailnetRequest) (*DeleteTailnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTailnet not implemented")
}
func (UnimplementedIonscaleServer) GetDNSConfig(context.Context, *GetDNSConfigRequest) (*GetDNSConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSConfig not implemented")
}
func (UnimplementedIonscaleServer) SetDNSConfig(context.Context, *SetDNSConfigRequest) (*SetDNSConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDNSConfig not implemented")
}
func (UnimplementedIonscaleServer) GetACLPolicy(context.Context, *GetACLPolicyRequest) (*GetACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetACLPolicy not implemented")
}
func (UnimplementedIonscaleServer) SetACLPolicy(context.Context, *SetACLPolicyRequest) (*SetACLPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetACLPolicy not implemented")
}
func (UnimplementedIonscaleServer) GetAuthKey(context.Context, *GetAuthKeyRequest) (*GetAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthKey not implemented")
}
func (UnimplementedIonscaleServer) CreateAuthKey(context.Context, *CreateAuthKeyRequest) (*CreateAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthKey not implemented")
}
func (UnimplementedIonscaleServer) DeleteAuthKey(context.Context, *DeleteAuthKeyRequest) (*DeleteAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthKey not implemented")
}
func (UnimplementedIonscaleServer) ListAuthKeys(context.Context, *ListAuthKeysRequest) (*ListAuthKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthKeys not implemented")
}
func (UnimplementedIonscaleServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedIonscaleServer) ExpireMachine(context.Context, *ExpireMachineRequest) (*ExpireMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireMachine not implemented")
}
func (UnimplementedIonscaleServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (UnimplementedIonscaleServer) GetMachineRoutes(context.Context, *GetMachineRoutesRequest) (*GetMachineRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineRoutes not implemented")
}
func (UnimplementedIonscaleServer) SetMachineRoutes(context.Context, *SetMachineRoutesRequest) (*GetMachineRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMachineRoutes not implemented")
}

// UnsafeIonscaleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IonscaleServer will
// result in compilation errors.
type UnsafeIonscaleServer interface {
	mustEmbedUnimplementedIonscaleServer()
}

func RegisterIonscaleServer(s grpc.ServiceRegistrar, srv IonscaleServer) {
	s.RegisterService(&Ionscale_ServiceDesc, srv)
}

func _Ionscale_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_GetDERPMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDERPMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetDERPMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetDERPMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetDERPMap(ctx, req.(*GetDERPMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_SetDERPMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDERPMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).SetDERPMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/SetDERPMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).SetDERPMap(ctx, req.(*SetDERPMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_CreateAuthMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).CreateAuthMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/CreateAuthMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).CreateAuthMethod(ctx, req.(*CreateAuthMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListAuthMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListAuthMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListAuthMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListAuthMethods(ctx, req.(*ListAuthMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_CreateTailnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTailnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).CreateTailnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/CreateTailnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).CreateTailnet(ctx, req.(*CreateTailnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_GetTailnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTailnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetTailnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetTailnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetTailnet(ctx, req.(*GetTailnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListTailnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTailnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListTailnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListTailnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListTailnets(ctx, req.(*ListTailnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_DeleteTailnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTailnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).DeleteTailnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/DeleteTailnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).DeleteTailnet(ctx, req.(*DeleteTailnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_GetDNSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetDNSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetDNSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetDNSConfig(ctx, req.(*GetDNSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_SetDNSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDNSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).SetDNSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/SetDNSConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).SetDNSConfig(ctx, req.(*SetDNSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_GetACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetACLPolicy(ctx, req.(*GetACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_SetACLPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetACLPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).SetACLPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/SetACLPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).SetACLPolicy(ctx, req.(*SetACLPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_GetAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetAuthKey(ctx, req.(*GetAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_CreateAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).CreateAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/CreateAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).CreateAuthKey(ctx, req.(*CreateAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_DeleteAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).DeleteAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/DeleteAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).DeleteAuthKey(ctx, req.(*DeleteAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListAuthKeys(ctx, req.(*ListAuthKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ExpireMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ExpireMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ExpireMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ExpireMachine(ctx, req.(*ExpireMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_GetMachineRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetMachineRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetMachineRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetMachineRoutes(ctx, req.(*GetMachineRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_SetMachineRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMachineRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).SetMachineRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/SetMachineRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).SetMachineRoutes(ctx, req.(*SetMachineRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ionscale_ServiceDesc is the grpc.ServiceDesc for Ionscale service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ionscale_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Ionscale",
	HandlerType: (*IonscaleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Ionscale_GetVersion_Handler,
		},
		{
			MethodName: "GetDERPMap",
			Handler:    _Ionscale_GetDERPMap_Handler,
		},
		{
			MethodName: "SetDERPMap",
			Handler:    _Ionscale_SetDERPMap_Handler,
		},
		{
			MethodName: "CreateAuthMethod",
			Handler:    _Ionscale_CreateAuthMethod_Handler,
		},
		{
			MethodName: "ListAuthMethods",
			Handler:    _Ionscale_ListAuthMethods_Handler,
		},
		{
			MethodName: "CreateTailnet",
			Handler:    _Ionscale_CreateTailnet_Handler,
		},
		{
			MethodName: "GetTailnet",
			Handler:    _Ionscale_GetTailnet_Handler,
		},
		{
			MethodName: "ListTailnets",
			Handler:    _Ionscale_ListTailnets_Handler,
		},
		{
			MethodName: "DeleteTailnet",
			Handler:    _Ionscale_DeleteTailnet_Handler,
		},
		{
			MethodName: "GetDNSConfig",
			Handler:    _Ionscale_GetDNSConfig_Handler,
		},
		{
			MethodName: "SetDNSConfig",
			Handler:    _Ionscale_SetDNSConfig_Handler,
		},
		{
			MethodName: "GetACLPolicy",
			Handler:    _Ionscale_GetACLPolicy_Handler,
		},
		{
			MethodName: "SetACLPolicy",
			Handler:    _Ionscale_SetACLPolicy_Handler,
		},
		{
			MethodName: "GetAuthKey",
			Handler:    _Ionscale_GetAuthKey_Handler,
		},
		{
			MethodName: "CreateAuthKey",
			Handler:    _Ionscale_CreateAuthKey_Handler,
		},
		{
			MethodName: "DeleteAuthKey",
			Handler:    _Ionscale_DeleteAuthKey_Handler,
		},
		{
			MethodName: "ListAuthKeys",
			Handler:    _Ionscale_ListAuthKeys_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Ionscale_ListMachines_Handler,
		},
		{
			MethodName: "ExpireMachine",
			Handler:    _Ionscale_ExpireMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Ionscale_DeleteMachine_Handler,
		},
		{
			MethodName: "GetMachineRoutes",
			Handler:    _Ionscale_GetMachineRoutes_Handler,
		},
		{
			MethodName: "SetMachineRoutes",
			Handler:    _Ionscale_SetMachineRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ionscale.proto",
}
