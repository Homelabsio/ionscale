// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IonscaleClient is the client API for Ionscale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IonscaleClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	CreateTailnet(ctx context.Context, in *CreateTailnetRequest, opts ...grpc.CallOption) (*CreateTailnetResponse, error)
	ListTailnets(ctx context.Context, in *ListTailnetRequest, opts ...grpc.CallOption) (*ListTailnetResponse, error)
	CreateAuthKey(ctx context.Context, in *CreateAuthKeyRequest, opts ...grpc.CallOption) (*CreateAuthKeyResponse, error)
	DeleteAuthKey(ctx context.Context, in *DeleteAuthKeyRequest, opts ...grpc.CallOption) (*DeleteAuthKeyResponse, error)
	ListAuthKeys(ctx context.Context, in *ListAuthKeysRequest, opts ...grpc.CallOption) (*ListAuthKeysResponse, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
}

type ionscaleClient struct {
	cc grpc.ClientConnInterface
}

func NewIonscaleClient(cc grpc.ClientConnInterface) IonscaleClient {
	return &ionscaleClient{cc}
}

func (c *ionscaleClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) CreateTailnet(ctx context.Context, in *CreateTailnetRequest, opts ...grpc.CallOption) (*CreateTailnetResponse, error) {
	out := new(CreateTailnetResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/CreateTailnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListTailnets(ctx context.Context, in *ListTailnetRequest, opts ...grpc.CallOption) (*ListTailnetResponse, error) {
	out := new(ListTailnetResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListTailnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) CreateAuthKey(ctx context.Context, in *CreateAuthKeyRequest, opts ...grpc.CallOption) (*CreateAuthKeyResponse, error) {
	out := new(CreateAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/CreateAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) DeleteAuthKey(ctx context.Context, in *DeleteAuthKeyRequest, opts ...grpc.CallOption) (*DeleteAuthKeyResponse, error) {
	out := new(DeleteAuthKeyResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/DeleteAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListAuthKeys(ctx context.Context, in *ListAuthKeysRequest, opts ...grpc.CallOption) (*ListAuthKeysResponse, error) {
	out := new(ListAuthKeysResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ionscaleClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, "/api.Ionscale/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IonscaleServer is the server API for Ionscale service.
// All implementations should embed UnimplementedIonscaleServer
// for forward compatibility
type IonscaleServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	CreateTailnet(context.Context, *CreateTailnetRequest) (*CreateTailnetResponse, error)
	ListTailnets(context.Context, *ListTailnetRequest) (*ListTailnetResponse, error)
	CreateAuthKey(context.Context, *CreateAuthKeyRequest) (*CreateAuthKeyResponse, error)
	DeleteAuthKey(context.Context, *DeleteAuthKeyRequest) (*DeleteAuthKeyResponse, error)
	ListAuthKeys(context.Context, *ListAuthKeysRequest) (*ListAuthKeysResponse, error)
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
}

// UnimplementedIonscaleServer should be embedded to have forward compatible implementations.
type UnimplementedIonscaleServer struct {
}

func (UnimplementedIonscaleServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedIonscaleServer) CreateTailnet(context.Context, *CreateTailnetRequest) (*CreateTailnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTailnet not implemented")
}
func (UnimplementedIonscaleServer) ListTailnets(context.Context, *ListTailnetRequest) (*ListTailnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTailnets not implemented")
}
func (UnimplementedIonscaleServer) CreateAuthKey(context.Context, *CreateAuthKeyRequest) (*CreateAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthKey not implemented")
}
func (UnimplementedIonscaleServer) DeleteAuthKey(context.Context, *DeleteAuthKeyRequest) (*DeleteAuthKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthKey not implemented")
}
func (UnimplementedIonscaleServer) ListAuthKeys(context.Context, *ListAuthKeysRequest) (*ListAuthKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthKeys not implemented")
}
func (UnimplementedIonscaleServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedIonscaleServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}

// UnsafeIonscaleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IonscaleServer will
// result in compilation errors.
type UnsafeIonscaleServer interface {
	mustEmbedUnimplementedIonscaleServer()
}

func RegisterIonscaleServer(s grpc.ServiceRegistrar, srv IonscaleServer) {
	s.RegisterService(&Ionscale_ServiceDesc, srv)
}

func _Ionscale_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_CreateTailnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTailnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).CreateTailnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/CreateTailnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).CreateTailnet(ctx, req.(*CreateTailnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListTailnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTailnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListTailnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListTailnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListTailnets(ctx, req.(*ListTailnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_CreateAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).CreateAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/CreateAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).CreateAuthKey(ctx, req.(*CreateAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_DeleteAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).DeleteAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/DeleteAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).DeleteAuthKey(ctx, req.(*DeleteAuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListAuthKeys(ctx, req.(*ListAuthKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ionscale_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IonscaleServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ionscale/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IonscaleServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ionscale_ServiceDesc is the grpc.ServiceDesc for Ionscale service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ionscale_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Ionscale",
	HandlerType: (*IonscaleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Ionscale_GetVersion_Handler,
		},
		{
			MethodName: "CreateTailnet",
			Handler:    _Ionscale_CreateTailnet_Handler,
		},
		{
			MethodName: "ListTailnets",
			Handler:    _Ionscale_ListTailnets_Handler,
		},
		{
			MethodName: "CreateAuthKey",
			Handler:    _Ionscale_CreateAuthKey_Handler,
		},
		{
			MethodName: "DeleteAuthKey",
			Handler:    _Ionscale_DeleteAuthKey_Handler,
		},
		{
			MethodName: "ListAuthKeys",
			Handler:    _Ionscale_ListAuthKeys_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Ionscale_ListMachines_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Ionscale_DeleteMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ionscale.proto",
}
